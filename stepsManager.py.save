from countdown import Countdown

class Step():
    def __init__(self, actions, buttonsLabels, titleLabel):
        self.actions = actions
        self.buttonsLabels = buttonsLabels
        self.titleLabel = titleLabel

class StepsManager():
    def __init__(self, photoBooth):
        self.photoBooth = photoBooth
        self.screen = self.photoBooth.screen
        self.style = self.photoBooth.style
        self.isCaptured = False
        self.captureIsStarted = False
        self.captureIsShown = False
        self.loadingLabel = "Chargement..."
        self.disabledButtons = False
        
        self.countdown = Countdown(self, 3, self.stepCapture)

        self.steps = {
            self.stepCameraError: Step(
                actions = (self.stepCameraError, self.checkCamera),
                buttonsLabels = ("", "Réessayer"),
                titleLabel = "Appareil photo non détecté",
            ),
            self.stepPreview: Step(
                actions = (self.stepPreview, self.startCountdown),
                buttonsLabels = ("", "Prendre la photo !"),
                titleLabel = "Préparez-vous",
            ),
            self.stepCapture: Step(
                actions = (self.stepPreview, self.printCapture),
                buttonsLabels = ("Refaire", "Imprimer"),
                titleLabel = "Valider la photo",
            ),
            self.stepCaptureError: Step(
                actions = (self.stepCaptureError, self.stepPreview),
                buttonsLabels = ("", "Réessayer"),
                titleLabel = "Erreur lors de la capture",
            ),
            self.stepPrint: Step(
                actions = (self.stepPrint, self.stepPrint),
                buttonsLabels = ("", ""),
                titleLabel = "Impression en cours ...",
            ),
        }
        self.step = self.stepPreview
  
    def checkCamera(self):
        self.photoBooth.camera.checkError()
    
    def stepCameraError(self):
        self.disabledButtons = False
        self.style.showErrorIcon()

    def stepCaptureError(self):
        self.disabledButtons = False
        self.style.showErrorIcon()
        
    def stepPreview(self):
        if self.captureIsStarted:
            self.captureIsStarted = False
            self.isCaptured = False
            self.captureIsShown = False
        
        self.image = self.photoBooth.camera.startPreview()
        self.style.showImage(self.image)
        
        if self.countdown.isStarted:
            self.style.showCounter(self.countdown.counter)
        
    def startCountdown(self):
        self.disabledButtons = True
        self.countdown = Countdown(self, 3, self.stepCapture)
        self.countdown.start()
                
    def startCapture(self):
        self.photoBooth.camera.captureImage()

    def stepCapture(self):
        if not self.captureIsShown and self.isCaptured:
            self.steps[self.stepCapture].titleLabel = ""
            self.style.showLoading(self.loadingLabel)
        elif not self.isCaptured:
            self.steps[self.stepCapture].titleLabel = "Ne bougez plus c'est parfait !"
            self.style.showCaptureIcon()
        else:
            self.steps[self.stepCapture].titleLabel = "Valider la photo"
            self.style.showImage(self.photoBooth.camera.capture)

        if not self.captureIsStarted:
            self.captureIsStarted = True
            self.startCapture()

    def stepPrint(self):
        self.style.showPrintIcon()

    def printCapture(self):
        self.disabledButtons = True
        self.step = self.stepPrint
        self.countdownPrint = Countdown(self, 20, self.stepPreview)
        self.countdownPrint.start()
        self.photoBooth.printer.convertImageToPdf(self.photoBooth.camera.target, self        #self.step = self.stepPreview
        self.disabledButtons = False
    
    def update(self): 
        self.step()
        self.style.showTitle(self.steps[self.step].titleLabel)
        if not self.disabledButtons:
            self.style.showButtons(self.steps[self.step].buttonsLabels)
        
    def stepAction(self, buttonId):
        #If action is a step changement -> Change current step to new step
        #Else -> start action
        if self.steps[self.step].actions[buttonId] in list(self.steps.keys()):
            self.step = self.steps[self.step].actions[buttonId]
        else:
            self.steps[self.step].actions[buttonId]()
